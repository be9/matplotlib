# To update, add a new entry to the versioninfo dictionary using the
# version string as a key. The value of the dict entry should be a 
# tuple of (name, description) tuples

versioninfo = {}


versioninfo['0.64'] = (
  ('polar plots', """\

polar plots with the polar command.  These create a axes.PolarAxes
instance, which defines the default axes, gridlines, etc.  Other plot
types can be used on polar axes, eg scatter.  See <a
href=examples/polar_demo.py>polar_demo.py</a>, <a
href=examples/polar_scatter.py>polar_scatter.py</a> and <a
href=screenshots.html#polar_demo>polar_demo<a/>."""),

  
  ('cairo backend', """\
Steve Chaplin has contributed a cairo and a gtkcairo backend - <a
href=http://cairographics.org>cairographics</a>.  Cairo is a vector
graphics library designed to provide high-quality display and print
output. Currently supported output targets include the X Window
System, OpenGL, in-memory image buffers, and image files (PNG and
PostScript).  See <a href=backends.html#Cairo>Cairo backend</a> for
details and install instructions"""),


  ('ipython integration', """\
Fernando has continued his excellent work integrating matplotlib with
<a href=http://ipython.scipy.org>ipython<a/> and a number of pylab
bugs have been ironed out.  matplotlib has incoroprated ipython's
numutils in the matplotlib.mlab module - Thanks Fernando.  See
IPython-0.6.4 - all similarities betwen matplotlib and ipython version
numbers are purely coincidental."""),

  ('postscript improvements', """
Jochen Voss has made a number of bugfixes and improvements to the
postscript backend, including text layout problems.  PS backend should
now be DSC compliant."""),

  ('Customizing ticks', """\
xticks and yticks now take kwargs so you can do, for example
<pre>
   >>> xticks( arange(3), ('Tom', 'Dick', 'Harry'), fontsize=14 )
</pre>
"""),

  ('PIL support', """\

<a href=matplotlib.matlab.html#-imshow>imshow</a> now supports PIL
images - see <a href=examples/image_demo3.py>image_demo3.py</a>.
Thanks Andrew Straw."""),

  ('barh', '<a href=matplotlib.matlab.html#-barh>barh</a> for horizontal bar charts; see <a href=examples/barh_demo.py>barh_demo.py</a>'),

  ('Verbose', """\

Added a verbose class to allow different levels of verbosity - see <a
href=.matplotlibrc>.matplotlibrc</a> for details.  Eg, you can now do
<pre>
     > python myscript.py --verbose-helpful
</pre>

to get a lot of information about what matplotlib is doing behind the
scenes, what resource files are being used etc.  The default verbose
settings and file handles for reporting are customizable in rc."""),

  ('numerous small bugfixes and improvements', """

fixes for gcc-3.4, allow -dsomeflag where someflag is not a backend,
errorbar now accepts barsabove to determine the plot order of the
errorbar markers and lines, fixed a corrcoef bug where args is a
matrix, Andrew Dalke contributed code to extend the strftime range to
the new matplotlib date range, fixes to keep support for python2.2"""),
  )

versioninfo['0.63'] = (
	('image interpolation', """\
image interpolation works properly.  I think I have finally and for
real this time fixed the image interpolation / edge effect bug.  It
turns out there was a bug in antigrain (very unusual!)  that was just
found, fixed, and released.  I've incorporated the latest release into
matplotlib, and after talking with the Maxim implemented a solution in
matplotlib which fixes the edge problem w/o the view lim hack used
previously.  Basically, I pad the edges of the input image.  This is
described in more detail in the new <a
href=examples/image_interp.py>image_interp.py</a>.  There is still an
occasional off by 1 rounding problem that causes a 1 pixel error (this
is independent of the interpolation/edge bug)."""),

        ('new dates handling', """\
The dates handling is rewritten from the ground up, and now requires
python2.3.  It makes extensive use of dateutil for date ticking.  All
of your old date code will break, but it's an easy port.  In
particular, note that the date tick location constructors now have a
different meaning.  See <a href=API_CHANGES>API_CHANGES</a>, <a
href=matplotlib.dates.html>matplotlib.dates</a>, the updated date
demos in examples/ and the new dates tutorial at <a
href=tutorial.html#dates>dates tutorial</a>."""),

('numerix supports both extensions at compile time', """\
setup.py now automatically detects Numeric, numarray or both, and
compiles in the appropriate extension code.  Thus you can use
matplotlib with either or both packages and still get the optimal
performance.  So it is no longer necessary to set NUMERIX in setup.py,
but it is necessary to have the extensions you want compiled available
at the time you compile matplotlib.  The win32 build is for numarray
1.1."""),

        ('xlim, ylim, xticks and yticks',"""\
New functions <a href=matplotlib.matlab.html#-xlim>xlim</a>, <a
href=matplotlib.matlab.html#-ylim>ylim</a>, <a
href=matplotlib.matlab.html#-xticks>xticks</a> and <a
href=matplotlib.matlab.html#-yticks>yticks</a> to make setting axis
limits, tick locations and labels more natural and elegant."""),

       ('print to file obj in agg', """\
Added print to file handle for backend agg; see <a
href=examples/print_stdout.py>print_stdout.py</a>.  Useful for webapp
servers who want to print to a pipe."""),

        ('x and y coord reporting', """\
x and y coords are printed in the toolbar on nouse motion in backends
gtk* and tkagg (not implemented yet in wx*). You can set the axis
attributes ax.fmt_xdata and ax.fmt_ydata with callable functions to
control the formatting of the reported coords (default uses the major
tick formatter).  See <a
href=examples/coords_report.py>coords_report.py</a> and <a
href=date_demo1.py>date_demo1.py</a>."""),

        ('axhline, axvline, axhspan and axvspan', """\
Added <a href=matplotlib.matlab.html#-axhline>axhline</a>, <a
href=matplotlib.matlab.html#-axvline>axvline</a>, <a
href=matplotlib.matlab.html#-axhspan>axhspan</a> and <a
href=matplotlib.matlab.html#-axvspan>axvspan</a> for plotting lines
and rectangles (spans) in mixed data/axes coords.  This is useful if
for example, you want to provide a threshold line or range where the x
range spans the axes (0-1 in axes coords) and the y range is given in
data units.  See <a href=examples/axhspan_demo.py>axhspan_demo.py</a>."""),

)

versioninfo['0.62'] = (

    ('ipython support', """\
Iteractive support in <a href=http://ipython.scipy.org>ipython</a>
with <tt>ipython -pylab</tt>, which detects your backend and loads the
appropriate interactive, threaded shell, as well as all of
matplotlib.matlab and numerix.  Requires ipython-0.6.3.  Backend
status summary: linux (all backends working), OSX (tkagg and gtk*
work), win32 (tkagg only).  Thanks Fernando Perez!			   
"""),

    ('Log ticking and formatting', """Excellent improvements in log
ticking and formatting.  You can now do log plots in any base with
major and minor tick support.  You can easily customize the location
of the minor ticks with the subs arguments.  See the new
<a href=screenshots.html#log_shot>screenshot and example</a> and help for
the log funcs, eg <a href=matplotlib.matlab.html#-loglog>loglog</a>.
Mathtext exponential labeling for log plots.  Thanks Darren Dale and
Gregory Lielens.

<pre>
  # base 16 semilog x plot with minor ticks on the 2s, 4s and 8s
  semilogx(x,y, basex=16, subsx=[2,4,8])
</pre>
"""),

    ('Mathtext optimizations', """\
Mathtext now more than 5x faster.  Thanks to Paul Mcguire for
optimizations in both pyparsing and the matplotlib grammar!
Warning, mathtext broken on python2.2.  We hope to fix this soon.
"""),

    ('FLTKAgg backend - alpha', """\
Gregory Lielens submitted an fltkagg backend which requires CVS
pyfltk.  Feedback please!
"""),

    ('Bug fixes', """\
Fixed some image edge effects, a ttf read problem in backend_ps on
win32, several errorbar problems, a HOME dir bug on win32, grid w/o
args now toggle grid state
"""),
)

versioninfo['0.61'] = (

    ('toolbar2', """\
A new, enhanced, navigation toolbar.  Set <tt>toolbar : toolbar2</tt>
in matplotlibrc to try it out.  Tutorial on the new toolbar is at <a
href=tutorial.html#toolbar2>toolbar2 tutorial</a>.  Note that this
toolbar behaves very differently than the classic toolbar.  To use it,
you must click on the pan/zoom or zoom to rect and then interact with
the axes by dragging your mouse over it.  The 'forward' and 'back'
buttons are used to navigate between previously defined view limits.
At some point we'll add multiple simultaneous axes support for the new
toolbar but we're still mulling over the interface - if you need it
you can still uses <tt>toolbar : classic</tt>."""),

    ('Mathtext for PS!!!',   """\
Also, PS now embeds TrueType fonts so the same fonts you use in the
*Agg GUIs should be displayed in PS output. Thanks Paul Barrett!"""),

    ('imread', """\
The <a href=matplotlib.matlab.html#-imread>imread</a> function is used
to load PNGs into arrays.  I'd like to add more image loaders and
savers down the road."""),


    ('New event handling',  """\
The functions mpl_connect and mpl_disconnect are used for backend
independent event handling.  The callback signature is <tt>func(event)</tt>.
See <a href=tutorial.html#events>events tutorial</a> and <a
href=examples/coords_demo.py>coords_demo.py</a>.  The new events carry
lots of useful information in them, like the coords in display and
data units, the axes instance they were over, keys pressed during the
event and more."""),

    ('svg fixes', """\
Many fixes to the SVG backend, including page layout, font support and
image.  SVG is now considered alpha.  You can save ps/eps/svg figures
from GUI backends by providing the right extensions.  SVG is currently
the fastest backend in my tests."""),

    ('More memory leaks fixed', """\
See <a href=faq.html#LEAKS>leaks FAQ</a> for details.  My estimate is that complex
figures (multiple subplots, images, etc..)  now leak no more than
10-50 bytes per figure.  Down from several hundred bytes per figure in
0.60."""),


    ('Rotated mathtext', """\
Vertical mathtext in backend_agg (ylabels now work properly!).
mathtext with arbitrary rotations in PS.  Thanks Jim Benson and Paul
Barrett!"""),

    ('Abbreviated line props', """\
Added some abbrev functions in matplotlib.lines, mainly for
interactive users trying to save key strokes.  markerfacecolor is a
lot of keys!  For lines, these abbrevs were added

<pre>
    aa  : antialiased
    c   : color
    ls  : linestyle
    lw  : linewidth
    mec : markeredgecolor
    mew : markeredgewidth
    mfc : markerfacecolor
    ms  : markersize
</pre>

Thus you can type --not necessarily recommended for readability in
scripts or apps but great for throwaway use in interactive shells
<pre>    
    # no antialiasing, thick green markeredge lines
    >>> plot(range(10), 'ro', aa=False, mew=2, mec='g')
</pre>

Analogs in matplotlib.patches

<pre>    
    aa  : antialiased
    lw  : linewidth
    ec  : edgecolor
    fc  : facecolor
</pre>    
"""),
    
    ('local rc files', """\
You can put a .matplotlibrc file in a dir to override the one in your
HOME dir.  If you have a project, say a book, and you want to make a
bunch of images with the same look and feel for the book, you can
place a custom rc file in the code dir for that book and this won't
affect the configs you use for normal, interactive use."""), 

    ('Installing', """\
Updated installing instructions at <a
href=installing.html>installing</a> (see also INSTALL in src distro).
Fixed a tk/osx install problem in setupext.py</a>"""),

    ('wx cursor demo', """\
New demo for wx/wxagg showing how to to make a flicker free cursor
that follows the mouse and reports the coords in a status bar - see
<a href=examples/wxcursor_demo.py>wxcursor_demo.py</a>"""),

    ('bug fixes', """\
Numerous bug fixes and minor enhancements detailed at
<a href=CHANGELOG>CHANGELOG</a>"""),
)

versioninfo['0.60'] = (

    ('figure images', """\
pixel-by-pixel, not resampled, images with the <a
href=matplotlib.matlab.html#-figimage>figimage</a> command.  Multiple
figure images (ie mosaics) with alpha blending are supported.  See <a
href=examples/figimage_demo.py>figimage_demo.py</a>
"""),

    ('multiple axes images with imshow', """\
You can compose multiple axes images with alpha blending.  See
screenshot <a
href=screenshots.html#layer_images>layer_images</a>
"""),

    ('unified color limit and color mapping arguments', """\
pcolor, scatter, imshow and figimage now have the same color map and
scaling arguments.  Interactive control of colormap and color scaling
with new matplotlib.matlab commands jet, gray and clim.  New
matplotlib rc parameters for default image params
"""),

    ('image origin can be upper or lower', """\
see <a
href=examples/image_origin.py>image_origin.py</a>
"""),

    ('support for py2exe', 'see <a href=py2exe_examples.zip>py2exe_examples.zip</a>'),

    ('new matplotlib.matlab command rc', """\
Use <a href=matplotlib.matlab.html#-rc>rc</a> for dynamic control of rc
parameters.  See matplotlib.matlab.html#-rc
and example <a href=examples/customize_rc.py>customize_rc.py</a>"""),

    ('draw command', """\
new <a href=matplotlib.matlab.html#-draw>draw</a> command to redraw
the figure - use this in place of multiple calls to show.  This is
equivalent to doing get_current_fig_manager().canvas.draw(), but takes
less typing :-)
"""),
    
    ('Elaborate finance demo', """\
New finance demo shows off may of the features of matplotlib - see
screenshot at <a href=screenshots.html#finance_work2>finance_work2</a>"""),

    ('dynamic image demo', """\

Andrew Straw submitted a dynamic_image example.  The wx version is
still in progree and has some flicker problems, but the gtk version is
pretty cool - <a
href=examples/dynamic_image_gtkagg.py>dynamic_image_gtkagg.py</a>"""),

    ('Bug fixes', 'dynamic_demo_wx, figure legends, memory leaks, axis scaling bug related to singleton plots'),

    )

versioninfo['0.54'] = (

    ('More general transformation architecture', """Earlier versions
of matplotlib handled transformation of x and y separately (ie we
assumed all transformations were separable) but this makes is
difficult to do rotations or polar transformations, for example.  The
new transformation lays the framework for doing general
transformations; see the <a
href=matplotlib.transforms.html>transforms</a> module."""),

    ('More efficient pcolor', """ pcolor is now implemented with <a
href=matplotlib.collections.html#PolyCollection>polygon
collections</a> which provides significantly faster performance across
backends.  The return value from pcolor is now a PolyCollection object
rather than a list of patches, but the API is largely compatible.  See
<a href=API_CHANGES>API_CHANGES</a>.  The old function pcolor_classic
is retained for full backward compatibility.  """),

    ('New scatter plots', """ The <a
href=matplotlib.matlab.html#-scatter>scatter</a> command is rewritten, and
is implemented in the backend with a new polygon collection class.
For large scatter plots, the performance is 5 times faster across all
backends and 10 times faster for the *Agg backends.  Also, scatter
works with many symbols: diamonds, sqaures, oriented triangles,
circles and more.  As with pcolor, the scatter command returns a
collection instance rather than a list of patches as before; see <a
href=API_CHANGES>API_CHANGES</a><p>

Also the size argument is now in points^2 (the area of the symbol in
points) and is not in data coords as before.  This fixes a few
problems: symbols are not skewed by unequally shaped axes, scatter
works with log coords w/o distoring the symbol, and it is matlab
compatible.<p>

The function scatter_classic is the old scatter function and will work
identically.

"""),

    ('Enhanced mathtext', r""" A significant rewrite of the mathtext
module provides much more precise layout.  The freetype component has
been factored out of the layout engine and replaced by an abstract
class for font handling.  This lays the groundwork for ps mathtext.
The text clipping problems have been fixed.  Added spacing commands
'\/' (small space) and '\ ' (regular space), and '\hspace{frac}'
(space is fraction of pointsize) as well as composite chars such as
\angstrom.  Fixed over/under subscripts so you can say x_i^j and
nested subscripts if you do x_i_{j} (you need the curlys)"""),

    ('Many new plot symbols and markers', """Thanks Gary Ruben.  See
<a href=matplotlib.matlab.html#-plot>plot</a>.
"""),

    ('Font cacheing', """Paul Barrett added caching support to the
font manager to increase performance.  This and other changes have
dramatically improved postscript backend performance.
"""),

    ('Newlines in text', """After much encouragement from Al, I
finally got around to supporting newline separated text in the Text
frontend, so this is no longer backend dependent.  As a bonus, it even
works with arbitrary rotations.  There is an additional text attribute
'multialignment' that specifies the alignment of the lines in
multiline text.  See <a href=examples/multiline.py>multiline.py</a>
and <a href=screenshots.html#align_text>alignment screenshot</a>.
Works with all text instances except mathtext."""),

    ('Axes hold', """\
matlab compatible hold command determines whether subsequent plot
commands overlay current plot or clear the axes by default.  Default
setting is set in matplotlibrc and toggled by the <a
href=matplotlib.matlab.html#-hold>hold</a> command.
"""),

    ('New rc file options', """\
You can control grid properties and tick padding (the space between
the axes and tick label) in matplotlibrc.  The new options and
defaults are

<pre>
axes.hold        :   True    # whether to clear the axes by default on
                             #  each plot command.  Toggle with hold command
grid.color       :   k       # grid color
grid.linestyle   :   :       # dotted
grid.linewidth   :   0.5     # in points            

tick.major.pad      : 4       # distance to major tick label in points
tick.minor.pad      : 4       # distance to the minor tick label in points
</pre>
"""),


    ('Full dash control', """You can precisely control the dashes with
a sequence of on off ink in points.  See <a
href=examples/dash_control.py>dash_control.py</a> """),

    ('Removed close buttons from GUI', """Steve Chaplin persuasively
argued these were a bad idea.  It's taken me a while not to
instinctively try and click on the missing buttons, but I'm used
to it now.
"""),

    ('Properly aligned text with arbitrary alignments', 
"""You can now expect horizontal and vertical alignment specifications
to work with text at an arbitrary angle, eg, 45 degrees.  See <a href=examples/alignment_test.py>alignment_test.py</a>
"""),

    ('Added stem plotting command', """
See <a href=matplotlib.matlab.html#-stem>stem</a> and <a href=examples/stem_plot.py>stem_plot.py</a>"""),

    ('Bug fix roundup', """ See <a href=CHANGELOG>CHANGELOG</a> for
details.  Executive summary: fixed ps centering, errorbar autoscaling,
constant data plot, copy tick attribute, mathtext fontsizing in
interactive mode, missing draw if interactive, some numerix/numarray
incompatibilities in type handling, agg memory leak, wx tooltips and
close not returning interpreter."""),


)
versioninfo['0.53'] = (
    ('Improved font manager and support', """
Paul Barrett has thoroughly overhauled font support.  FontTools and
ttfquery are no longer required for font finding as matplotlib now has
a completely freestanding freetype2 implementation and font finder.
Among other things, this should enable you to specify fonts in your
scripts and matplotlibrc file and generate consistent figures across
backends and operating systems.  The font finder algorithm and
implementation are based on the <a
href=http://www.w3.org/TR/1999/REC-CSS1-19990111>W3C standard</a>.<p>

See <a href=matplotlib.font_manager.html>the font manager module</a>
documentation, the <a href=fonts.html>fonts documentation</a> and the
updated <a href=.matplotlibrc>.matplotlibrc</a> file for more details;
please update your .matplotlibrc files as described in that link.
"""),

    ('Backend WXAgg', """
Antigrain rendering to wxpython applications and figure windows.  Now
wx users have access to all the latest matplotlib functionality,
including mathtext, antialised drawing, alpha blending and image
support.
"""),

    ('Major and minor ticks',
"""
Full support for major and minor ticks with a bevy of more intelligent
tick locators supplied in the <a
href=matplotlib.ticker.html>ticker</a> module.  Fully customizable and
user definable tick locators and formatters.  See <a
href=examples/major_minor_demo1.py>major_minor_demo1.py</a> and <a
href=examples/major_minor_demo2.py>major_minor_demo2.py</a>.  The
default tick labeler is much more intelligent is choosing good tick
locations.
"""
     ),

    ('Date plot', """
A new command <a href=matplotlib.matlab.html#-plot_date>plot_date</a>
command for plotting date dependent data; see <a
href=screenshots.html#date_demo>date demo</a>.  Converters supplied in
the <a href=matplotlib.dates.html>dates</a> module allow you to work
with a variety of datetime instances.  Custom date locators and
formatters allow you to place major and minor ticks by minute, hour,
weekday, month, year, etc, and use strftime format strings to format
the ticks.  See examples <a
href=examples/date_demo1.py>date_demo1.py</a> and <a
href=examples/date_demo2.py>date_demo2.py</a>.  The <a
href=matplotlib.dates.html>dates documentation</a> provides an
overview and guide to with dates."""),

    
    ('Ported image support to numarray and postscript backend', """
The image module now works with Numeric or numarray, and now works in
the postscript backend as well as GTKAgg, TkAgg, WXAgg, Agg, and GTK.
"""),

    ('Changes to matplotlibrc', """
Many features added to the default config file for font support, tkagg
windowing in win32, and more.  Please use the new file at <a
href=.matplotlibrc>.matplotlibrc</a>.  By default, the installer will
overwrite the existing file in the install path, so if you want to
preserve your's, please move it to your HOME dir and set the
environment variable if necessary.
"""),

    ('load and save commands', """
Helper functions for loading and saving ASCII arrays.  See <a
href=matplotlib.matlab.html#-load>load</a> and <a
href=matplotlib.matlab.html#-save>save</a>.
"""),

    ('Two scales on the same axes',
"""
Added some features to the axis and ticks to allow two plots with
different scales on the "same" axes with different scales, ticks
and labels on the left and right side of the x axis.  To see why same is
quoted, see <a href=examples/two_scales.py>two_scales.py</a>.
"""
     ),

    ('finance module',
"""
The finance module includes a function to fetch quotes from yahoo, to
draw candlestick plots, and to draw vertical line plots for high-low
range with open-close ticks to the left and right.  I'm hoping that
user contributions will make up the bulk of this module since I'm not
a finance guy!  See <a href=screenshots.html#date_demo>date demo</a>.
"""
     ),
    )
#######################################################################################    

versioninfo['0.52'] = (
    ('Image support', """
Basic image support.  Images can be specified by Numeric float arrays
<pre>
     imshow(X)
     If X is MxN, assume luminance (grayscale)
     If X is MxNx3, assume RGB
     If X is MxNx4, assume RGBA

     imshow(X, cmap)  # plot X using colormap; see examples/pcolor_demo2.py
</pre>

see <a href=matplotlib.matlab.html#-imshow>imshow</a> and the
image_demo*.py examples in the matplotlib src distribution.  Set
BUILD_IMAGE in setup.py for image support.  Currently available on
Agg, GTKAgg, TkAgg and GTK backends.  win32 GTK users should use
GTKAgg unless pygtk is compiled with Numeric support.

The pseudo-color images generated with imshow are 8 million times
faster than pcolor's.
"""),

    ('Figure legends', """
In addition to adding legends to the axes with the legend command, you
can place legends anywhere in the figure with <a href=matplotlib.matlab.html#-figlegend>figlegend</a>
"""),

    ('fill command', """
Andrew Straw wrote a <a href=matplotlib.matlab.html#-fill>fill</a>
command to plot filled polygons.  See <a
href=examples/fill_demo.py>fill_demo.py</a>
"""),

    ('specgram command', """ Make 2D spectrograms with <a
href=matplotlib.matlab.html#-specgram>specgram</a>.  Requires image
support; see <a href=examples/specgram_demo.py>specgram_demo.py</a>
"""),

	('Bugfixes and minor improvements', """\

<ul>
  <li> Tk : Fixed a close figure bug in interactive mode</li>
  <li> GTK : Much improved mathtext performance thanks to patch by Trevor Blackwell</li>
    <li> All : Fixed a bug that showed up in successive calls to plot with just one plot argument</li>
</ul>
"""),
     )
################################################################################


versioninfo['0.51'] = (
    ('Tkinter backend', """Todd Miller has written a Tkinter backend.
This is a significant step forward, because now matplotlib works out
of the box with any python + numeric.  The Tkinter backend works
interactively from any python shell - see the <a
href=interactive.html>interactive documentation</a>.  Also, because
TkAgg uses the agg backend for rendering, it has all of the features
of agg, including fast antialiased rendering, freetype2, alpha
blending, mathtext, and so on.  See the <a
href=backends.html#TkAgg>TkAgg backend</a>.  To use the TkAgg backend,
you must launch your scripts in interactive mode <tt>python -i
myscript.py -dTkAgg</tt>; otherwise they'll just pop up and
disappear.""" ),

    ('GTKAgg', """GTK widgets with antigrain rendering.  See the <a
href=backends.html#GTKAgg>GTKAgg backend</a>.""" ),
    
    ('freetype2 support added for agg backend', """With freetype2,
agg now renders fonts nicely even at very small raster sizes.""" ),

    ('math text', """matplotlib now ships with the <a
href=http://www.math.utah.edu/~beebe/fonts/bakoma.html>BaKoMa</a> TeX
Computer Modern fonts, and displays math text using TeX expressions.
See <a href=screenshots.html#mathtext_demo>screenshot</a> and the <a
href=matplotlib.mathtext.html>mathtext</a> documentation for usage
information.  Currently available on GTK, Agg, TkAgg and GTKAgg. If
you build matplotlib yourself, you need to edit setup.py and set
BUILD_FT2FONT"""),

    ('configuration file', """A configuration file is placed in your
install path (distutils.sysconfig.PREFIX + 'share/matplotlib').  This
determines many of the default figure properties: the default backend,
line properties, text properties, colors, and more.  See <a
href=.matplotlibrc>.matplotlibrc</a> for an example configuration
file.  Place this in your home dir (linux and friends), or edit in the
install path (windows).  See the faqs <a
href=faq.html#MATPLOTLIBRC>matplotlibrc</a> and <a
href=faq.html#CUSTOM>overriding defaults</a>.  """),

    ('numarray support', """Todd Miller has provided a numerix module
which allows you to choose between Numeric of numarray.  You can set
Numeric or numarray in your matplotlibrc file, with an environment
variable, or from the prompt.  See the <a
href=matplotlib.numerix.html>numerix module</a> for more information
and <a href=NUMARRAY_ISSUES>numarray issues</a> for a summary of known
issues in using numarray.  """),

    ('data clipping off by default', """Data clipping, as opposed to
viewport clipping, is turned off by default.  You can change the
default behavior in <a href=.matplotlibrc>.matplotlibrc</a> or set it
to be true when needed as in <a
href=examples/stock_demo.py>stock_demo.py</a> """),

    ('kwargs in plot commands', """The plot commands now take kwargs
that are can be used to set line properties (any property that has a
set_* method).  You can use this to set a line label (for auto
legends), linewidth, anitialising, marker face color, etc.  Here is an
example:

<pre>
plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)
plot([1,2,3], [1,4,9], 'rs',  label='line 2')
axis([0, 4, 0, 10])
legend()
</pre>
"""),

	('Bugfixes and minor improvements', """\

<ul>

  <li> GTK : fixed a subplot selection GUI bug specific to
  python2.2</li>
  <li> ALL : Fixed a multiple column subplot layout bug</li>
  <li> PS : Fixed an afm parser - thanks Dominique</li>
  <li> Agg : Agg now respects antialiased=False</li>

</ul>

"""
),
)
#############################################################################

versioninfo['0.50'] = (
    ('Antigrain backend: Agg', """Adding to the growing list of image
backends is <a href=http://antigrain.com>Antigrain</a>.  This is a
backend written mostly in extension code and is the fastest of all the
image backends.  Agg supports freetype fonts, antialiased drawing,
alpha blending, and much more. The windows installer contains
everything you need except Numeric to use the agg backend out of the
box; for other platforms see <a href=backends.html#Agg>The Agg
Backend</a> """ ),


    ('Paint/libart backend', """David Moore wrote a backend for <a
href=http://sourceforge.net/projects/pypaint>pypaint</a>, a <a
href=http://www.levien.com/libart>libart</a> wrapper.  libart is a
high quality, cross platform image renderer that supports antialiased
lines, freetype fonts, and other capabilities to soon be exploited.
Thanks David!  See <a href=backends.html#Paint>The Paint Backend</a>
for more information and install instructions""" ),


        ('The Matplotlib <a href=faq.html>FAQ</a>', 'Matplotlib now has a FAQ.'),

        ('Alpha channel attribute', """All the figure elements now
have an alpha attribute to allow blending and translucency.  Not all
backends are currenly capable of supporting alpha - currently only
Agg, but Paint should be able to support this soon - see the scatter
<a href=screenshots.html#scatter_demo2>screenshot</a> for an example
of alpha at work."""),

        ('Table class added', """John Gill has developed a very nice <a
href=matplotlib.table.html>Table</a> class and <a
href=matplotlib.matlab.html#-table>table</a> function that plays well
with bar charts and stacked bar charts.  See example code and
screenshot <a href=screenshots.html#table_demo>table_demo</a>."""),

	('new plot commands <a href=matplotlib.matlab.html#-cla>cla</a> and <a href=matplotlib.matlab.html#-clf>clf</a>', """Clear the current axes or figure.  Useful in interactive plotting from a python shell""" ),

	('Added x linesyle', """Matt MacMahon submitted a patch for an
'x' linestyle.  Thanks Matt! """ ),

	('Exposed legend properties', """Added methods to access the legend primities: text, lines, and rectangles to allow fine-grained control over legend properties; see <a href=examples/legend_demo.py>legend_demo.py</a>""" ),
	
	('gd module on win32', """\
With much weeping and gnashing of teeth and help from half the people
on this globe, built a gdmodule win32 installer.  Special thanks to
Stefan Kuzminski for putting up with my endless windows confusions.
See the win32 quickstart at <a
href=backends.html#GDWIN32>installing</a> the GD backend."""
),	

	('GD supports clipping and antialiased line drawing', """\
See instructions about upgrading gd and gdmodule at <a
href=backends.html#GD>Installing the GD backend</a>.  The line object
has a new 'antialiased' property, that if True, the backend will
render the line antialiased if supported.  Note antialiased drawing
under GD is slow, so be sure to turn the property off <tt>set(lines,
'antialiased', False)</tt> if you experience performance problems.  If
you need performance and antialiasing, use the agg backend."""),

	('wild and wonderful bar charts', """\
You can provide an optional argument bottom to the <a
href=matplotlib.matlab.html#-bar>bar</a> command to determine where
the bottom of each bar is, default 0 for all.  This enables stacked
bar plots and candelstick plots -- <a
href=examples/bar_stacked.py>examples/bar_stacked.py</a>.  Thanks to
David Moore and John Gill for suggestions and code.  """),

	('Figure backend refactored', """\
The figure functionality was split into a backend independent
component <a href=matplotlib.figure.html>Figure</a> and a backend
dependent component <a
href=matplotlib.backend_bases.html#FigureCanvasBase>FigureCanvasBase</a>.
This completes the transition to a totally abstract figure interface
and improves the ability the switch backends and a figure to multiple
backends.  See <a href=API_CHANGES>API_CHANGES</a> for information on
migrating applications to the new API."""),

	('Bugfixes and optimizations', """\

<ul>

  <li> All : the yticks on the right hand side were placed incorrectly,
  now fixed</li>

  <li> All : Exposed all Figure construc attributes (figsize, dpi,
  facecolor, edgecolor) to matlab interface</li>

  <li> All : ticklabels now make a more intelligent choice about how
  many significant digits to display </li>

  <li> GD : An int truncation bug was causing the dotted lines to
  disappear</li>

  <li> GD and GTK : Fixed line width to scale with DPI</li>

  <li> GTK and WX : Lazy import of backend_ps for backend switching
  improves startup time</li>

  <li> GD, GTK and PS : Fixed minor text layout problems</li>

  <li> GD : Fixed the constant for GD which maps pixels per inch -
  this should give better agreement with other backends with he
  relative sizes of objects</li>

  <li> GTK : Dash spacing was not properly scaling with DPI</li> 
  <li> GTK : Rotated text did not display correctly in some cases</li> 

  <li> GTK : Lots of optimizations using cacheing in GTK backend for
  improved performace for monitoring / animation scripts.  Discovered
  and patched a memory leak in pygtk -- see <a
  href=http://bugzilla.gnome.org/show_bug.cgi?id=133681>bugzilla</a>
  which was causing repeat calls to draw() to leak memory.</li>

  <li>GTK on win32.  Fixed a problem where pygtk couldn't find Times.
  See FAQ entry <a href=faq.html#WINFONTS>GTK/Win32 font
  problem</a>.</li>

  <li>Fixed some bugs and added some features that make wx and gtk
work better interactively from a python shell</li>

</ul>

"""),



)
########################################################################

versioninfo['0.42'] = (
	('EPS output from PS backend', 
"""Just add an eps extension"""),

	('PS and EPS save from GTK and WX backends with bugs fixed',
"""
A few of the bugs that were lingering in the PS output from the GTK
backend have been cleared up.  A fairly substantial refactoring of the
Text class enabled this.  Text is now backend independent and behaves
like the other artists in the figure (lines, patches, etc).
Additionally, PS and EPS save from WX backend work
"""),	

	('Object picker example', 
"""The file examples/object_picker.py is a template showing how to
select objects in the figure with the mouse(eg, text, lines).  If you
click on the line, a properties dialog will pop up.  You can edit the
line properties.  This is just a template for those who want to
develop a GUI properties dialog.  If interested, contact the mailing
list.  It would be straight forward to extend this example to allow
you to move objects in the figure, etc..."""),



)
########################################################################

versioninfo['0.41'] = (
('Pcolor optimizations', 
"""Several optimizations have improved the performance of pcolor
across all backends, 4x on the GTK backend"""),

	('PS save from GTK backend',
"""
An alpha version of the PS export functionality from the GTK backend.
Mostly works with a few know problems.  You can simply call
savefig('somefile.ps') or use the PS extension when saving from the
GUI.
"""),	

	('Bug fixes',
"""
Fixed bugs in semilogy and in setting dashes under some versions of
Numeric
"""),	

	('bar takes (optional)multiple color args',
"""
You can now pass bar a len(x) list of color args to have bars with
different colors.
"""),	
)
##############################################################################

versioninfo['0.40'] = (
('Wx python backend', 
""" Jeremy O'Donoghue has done an amazing job implementing the backend
for <a href=http://www.wxpython.org>wxpython</a>.  See <a
href=matplotlib.backends.backend_wx.html>backend_wx</a> for a status
report on what's working and what the outstanding issues are."""),

	('New plotting functions',
"""
Several new plotting functions are added.  <a
href=matplotlib.matlab.html#-psd>psd</a> plots the power spectral
density of a time series, <a href=matplotlib.matlab.html#-csd>csd</a>
plots the cross spectral density of two time series, and <a
href=matplotlib.matlab.html#-cohere>cohere</a> plots the coherence.
See the examples <a href=examples/psd_demo.py>psd_demo.py</a> and <a
href=examples/csd_demo.py>csd_demo.py</a>
"""),	

	('Expanded legend capabilities',
"""
The legend class is improved, with a more sophisticated layout engine
and the ability to accept lines or rectangle patches as an optional
first argument to specify which lines/patches make up the legend.
There are also additional legend placement locations, like 'upper
center'.  See <a href=screenshots.html#legend_demo>legend_demo</a> and
<a href=screenshots.html#barchart_demo>barchart_demo</a>.
"""),

        ('Expanded errorbar capabilities',
"""
Gary Ruben contributed some code to support x and y errorbars, either
symmetric or asymmetric.  See <a
href=examples/errorbar_demo.py>errorbar_demo.py</a> for examples of
all the wild and wonderful errorbar styles.  Bar charts can now also
display errorbars; see <a
href=screenshots.html#barchart_demo>barchart_demo</a>
"""),

        ('Substantially improved transform architecture',
"""
The transform architecture was refactored, allowing much more precise
layout.  Lines, patches, text, etc... can now be placed and scaled in
arbitrary units, relative axes units, or physical size.  Application
programmers who want to create lines, patches and text directly using
the API should read the <a href=matplotlib.transforms.html>transform
module</a> docs for more info.  See <a
href=matplotlib.matlab.html#-text>text</a> for an example of how to
specify text locations in axes coords (0,0 is lower left and 1,1 is
upper right).
"""),

        )
###############################################################################

versioninfo['0.32'] = (
	('wx python backend -- development version',
"""
Jeremy O'Donoghue has done an amazing job implementing the backend for
<a href=http://www.wxpython.org>wxpython</a>.  The code is still alpha
and several of the features that will be available are under active
development.  See the code matplotlib/backends/backend_wx.py for a
report on existing features and known bugs.  If you have wxpython
installed, you can take it for a test drive with <tt>python
yourscript.py -dWX</tt> and please report any bugs not listed in the
KNOWN BUGS section of the wx src to the <a
href=http://sourceforge.net/mailarchive/forum.php?forum_id=36187>matplotlib-devel</a>
mailing list.
"""),	
	('Pseudo color plots',
"""
The <a href=matplotlib.matlab.html#-pcolor>pcolor</a> command
generates pseudo color plots.  See <a
href=screenshots.html#pcolor_demo>pcolor_demo</a> and <a
href=screenshots.html#mri_with_eeg>mri_with_eeg</a> for screenshots
and <a href=examples/pcolor_demo.py>pcolor_demo.py</a> for some
example code
"""),
	('Numerous small bugfixes',
"""
Fixed reversed zoom tools, bug in ticklabel setting, bug in AFM font
path setting for PS backend, fixed a label position bug
"""),
        )
###############################################################################        

versioninfo['0.29.2'] = (
    ('Log scaling',
"""
Andrew Straw chipped in provided some code to support log scaling.
Many thanks.  matplotlib now has three new commands <a
    href=matplotlib.matlab.html#-semilogx>semilogx</a>, <a
    href=matplotlib.matlab.html#-semilogy>semilogy</a>, and <a
    href=matplotlib.matlab.html#-loglog>loglog</a>, and a new demo
   <a href=examples/log_demo.py>log_demo.py</a>
"""),
    )
##############################################################################

versioninfo['0.29.1'] = (
    ('GTK bugfixes and interactive mode',
"""This includes several bug fixes in the GTK backend which affected
interactive mode and figure resizing.  See <a href=examples/interactive2.py>interactive2.py</a> in
the new src release.
"""),
    ('Figure legends',
"""A matlab compatible legend command has been added.  See
<a href=examples/legend_demo.py>legend_demo.py</a>
"""),
   ('Bug fixes in alternate color specifications',
"""Some bugs regarding alternate ways of specifying colors have been
ironed out (you can now use hex strings or 0-1 RGB tuples anywhere a
color format string is supported ).  See <a
href=examples/color_demo.py>color_demo.py</a>
"""),
)
##############################################################################

versioninfo['0.29'] = (
	('Multiple output devices', 
"""The major improvement in matplotlib with this release is that the
library no longer requires pygtk or GTK, and instead renders to an
abstract drawing interface.  This allows you to use matplotlib even in
environments with no X server (such as for a web application server to
make dynamic charts), and to create publication quality postscript
output.  See <a href=backends.html>output formats</a>.
"""),
        ('Improved scaling with high resolution outputs',
"""
Earlier versions of matplotlib did not properly handle the scaling of
text and marker sizes with font resolution, so when you went from a
100DPI screen image to a 600DPI output image, the text and marker
sizes appeared too small.  This has been fixed for all of the
matplotlib output formats.
"""),

        ('Reorganization of class library',
"""
The class library has been substantially refactored, to isolate the
renderer and graphics context classes that backend writers must
implement.  See backends/backend_template.py if you want to write a
backend for your favorite GUI or output format.
"""),

        ('Line class rewritten for greater matlab compatibility',
"""
The line classes have all been reorganized into a single class that
has greater matlab compatibility.  This enables you to change existing
lines to a new line style (eg, from solid line to markers with
circles) as well as supports lines with a combination of line styles
and markers times (eg, data points marked with circles and a dash line
interpolating them).
"""),

        ('Many small bug fixes',
"""
"""),
)
############################################################################

versioninfo['0.21'] = (
    ('Deprecation warnings',
"""
Several users reported Deprecation warnings with python2.3 and pygtk
1.99.18.  These were all related to passing floats rather than ints to
gtk drawing commands.  These have been cleaned up and none of the
examples generate warnings.  Let me know if you get some!
"""),
    ('Improved interactive shell',
"""
Jon Anderson posted an improved GTK shell to the pygtk mailing list.
Using this no longer requires that pygtk have threading built in.  See
<a href="examples/interactive2.py">interactive2.py</a>.  Use this if you want to make plots
interactively from the python shell.
"""),
    ('Specifying colors',
"""
You can now specify colors with color format strings, RGB tuples, or
hex strings as in html.  See <a href="examples/color_demo.py">color_demo.py</a>
"""),
    ('Figure text',
"""
All text in matplotlib has been in axis (data coordinates).  Sometimes
it's helpful to be able to specify text in relative figure
coordinates.  Now figures have text.  When you scroll interactively,
axis text moves with the data, figure text is fixed.  This is also
useful for making a figure title when you have multiple columns of
subplots.  See <a href="examples/figtext.py">figtext.py</a>
"""),
    ('Flicker free updates',
"""
All drawing is done to a pixmap and then updated.  This allows flicker
free updates of the figure.  You can use this, for example, to build a
system monitor, which continuously shows system resources such as RAM,
CPU, etc...  See <a href="examples/system_monitor.py">system_monitor.py</a> for a demo. 
"""),
    )
############################################################################    

versioninfo['0.2'] = (
('Font handling',
"""
Major improvements in font and text handling.  matplotlib 0.1 drew all
text in the same, non-configurable font.  In 0.2, font name, size,
weight, and angle, color, rotation, and more are easily configurable.
See the <a href=tutorial.html#text>text tutorial</a>.
"""),

('Multiple figures',
"""
Multiple figures supported with the <a
href=matplotlib.matlab.html#-figure>figure</a> command.  See the <a
href=tutorial.html#figs_and_axes>Working with multiple figures and
axes</a>.
"""),

('Interactive shell',
"""
Interactive use from the python shell if you have pygtk compiled with
threads.  See <a href=interactive.html>Using matplotlib
interactively</a>.
"""),

('Saving figures', 
""" Ability to save figures in arbitrary resolution PNG or JPEG with a
bug fix that caused saved figures to be corrupted by anything blocking
the figure window.  A GUI widget has been added to the figure toolbar
to save figures and a new command <a
href=matplotlib.matlab.html#-savefig>savefig</a> has been added.  """),

('Navigation',
"""
A new and hopefully improved navigation toolbar has been added that
doesn't require a wheel mouse, but still works with one.  See the <a
href=tutorial.html#navigation>Navigation tutorial</a>.
"""),

('More examples and screenshots',
"""
New examples and screenshots illustrating the new text functionality,
the new plot types, and new commands.  See the examples subdirectory
in the src distribution.
"""),

('Patches',
"""
A <a href=matplotlib.patches.html#Patch>Patch</a> class added for drawing patches
(rectangles, polygons, circles).  This supports three new plotting
commands <a href=matplotlib.matlab.html#-scatter>scatter</a>, <a
href=matplotlib.matlab.html#-hist>hist</a> and <a href=matplotlib.matlab.html#-bar>bar</a>,
with more to come.
"""),

('New commands',
"""
New plotting commands <a href=matplotlib.matlab.html#-bar>bar</a>, <a href=matplotlib.matlab.html#-close>close</a>, <a href=matplotlib.matlab.html#-errorbar>errorbar</a>, <a href=matplotlib.matlab.html#-figure>figure</a>, <a href=matplotlib.matlab.html#-hist>hist</a>, <a href=matplotlib.matlab.html#-text>text</a>,
  <a href=matplotlib.matlab.html#-scatter>scatter</a>, <a href=matplotlib.matlab.html#-savefig>savefig</a>, <a href=matplotlib.matlab.html#-ylabel>ylabel</a>.
"""),

('Matplotlib on sourceforge',
"""
matplotlib homepage moved to <a
href=http://matplotlib.sourceforge.net>sourceforge</a> with a
(hopefully) more useful homepage.
"""),

('Documentation',
"""
Much better documentation and a <a href=tutorial.html>tutorial</a>.
"""),

('Refactoring',
"""
Substantial rewrite of class library.  All text now handled by the <a
href=text.html#AxisText>AxisText</a> class in text.py.  Axis handling
refactored into dedicated class <a href=figure.html#Axis>Axis</a>
defined in figure.py.
"""),
)

# sort versions
versions = versioninfo.keys()
versions.sort()
versions.reverse()
versioninfo_list = [(ver, versioninfo[ver]) for ver in versions]

@header@

+ for version, items in versioninfo_list:
<h2> <a name=@version@>What's new in matplotlib @version@</a></h2>
  + for title, description in items:
<h4> <a name="@version@-@title.replace(' ', '_')@">@title@</a></h4>
@description@<br>
  -
-

@footer@
