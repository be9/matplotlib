@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.colors</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/usr/local/lib/python2.3/site-packages/matplotlib/colors.py">/usr/local/lib/python2.3/site-packages/matplotlib/colors.py</a></font></td></tr></table>
    <p><tt>A&nbsp;class&nbsp;for&nbsp;converting&nbsp;color&nbsp;arguments&nbsp;to&nbsp;RGB<br>
&nbsp;<br>
This&nbsp;class&nbsp;instantiates&nbsp;a&nbsp;single&nbsp;instance&nbsp;colorConverter&nbsp;that&nbsp;is&nbsp;used<br>
to&nbsp;convert&nbsp;matlab&nbsp;color&nbsp;strings&nbsp;to&nbsp;RGB.&nbsp;&nbsp;RGB&nbsp;is&nbsp;a&nbsp;tuple&nbsp;of&nbsp;float&nbsp;RGB<br>
values&nbsp;in&nbsp;the&nbsp;range&nbsp;0-1.<br>
&nbsp;<br>
Commands&nbsp;which&nbsp;take&nbsp;color&nbsp;arguments&nbsp;can&nbsp;use&nbsp;several&nbsp;formats&nbsp;to&nbsp;specify<br>
the&nbsp;colors.&nbsp;&nbsp;For&nbsp;the&nbsp;basic&nbsp;builtin&nbsp;colors,&nbsp;you&nbsp;can&nbsp;use&nbsp;a&nbsp;single&nbsp;letter<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;&nbsp;:&nbsp;blue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g&nbsp;&nbsp;:&nbsp;green<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;&nbsp;:&nbsp;red<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;&nbsp;:&nbsp;cyan<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m&nbsp;&nbsp;:&nbsp;magenta<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;:&nbsp;yellow<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k&nbsp;&nbsp;:&nbsp;black&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w&nbsp;&nbsp;:&nbsp;white<br>
&nbsp;<br>
&nbsp;<br>
For&nbsp;a&nbsp;greater&nbsp;range&nbsp;of&nbsp;colors,&nbsp;you&nbsp;have&nbsp;two&nbsp;options.&nbsp;&nbsp;You&nbsp;can&nbsp;specify<br>
the&nbsp;color&nbsp;using&nbsp;an&nbsp;html&nbsp;hex&nbsp;string,&nbsp;as&nbsp;in<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color&nbsp;=&nbsp;'#eeefff'<br>
&nbsp;<br>
or&nbsp;you&nbsp;can&nbsp;pass&nbsp;an&nbsp;R,G,B&nbsp;tuple,&nbsp;where&nbsp;each&nbsp;of&nbsp;R,G,B&nbsp;are&nbsp;in&nbsp;the&nbsp;range<br>
[0,1].</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="MLab.html">MLab</a><br>
</td><td width="25%" valign=top></td><td width="25%" valign=top></td><td width="25%" valign=top></td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#ColorConverter">ColorConverter</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.colors.html#Colormap">Colormap</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#LinearSegmentedColormap">LinearSegmentedColormap</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#normalize">normalize</a>
</font></dt></dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="ColorConverter">class <strong>ColorConverter</strong></a></font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="ColorConverter-to_rgb"><strong>to_rgb</strong></a>(self, arg)</dt><dd><tt>returns&nbsp;a&nbsp;tuple&nbsp;of&nbsp;three&nbsp;floats&nbsp;from&nbsp;0-1.&nbsp;&nbsp;arg&nbsp;can&nbsp;be&nbsp;a&nbsp;matlab<br>
format&nbsp;string,&nbsp;a&nbsp;html&nbsp;hex&nbsp;color&nbsp;string,&nbsp;an&nbsp;rgb&nbsp;tuple,&nbsp;or&nbsp;a<br>
float&nbsp;between&nbsp;0&nbsp;and&nbsp;1.&nbsp;&nbsp;In&nbsp;the&nbsp;latter&nbsp;case,&nbsp;grayscale&nbsp;is&nbsp;used</tt></dd></dl>

<dl><dt><a name="ColorConverter-to_rgba"><strong>to_rgba</strong></a>(self, arg, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>returns&nbsp;a&nbsp;tuple&nbsp;of&nbsp;four&nbsp;floats&nbsp;from&nbsp;0-1.&nbsp;&nbsp;arg&nbsp;can&nbsp;be&nbsp;a&nbsp;matlab<br>
format&nbsp;string,&nbsp;a&nbsp;html&nbsp;hex&nbsp;color&nbsp;string,&nbsp;an&nbsp;rgb&nbsp;tuple,&nbsp;or&nbsp;a<br>
float&nbsp;between&nbsp;0&nbsp;and&nbsp;1.&nbsp;&nbsp;In&nbsp;the&nbsp;latter&nbsp;case,&nbsp;grayscale&nbsp;is&nbsp;used</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>cache</strong> = {}</dl>

<dl><dt><strong>colors</strong> = {'b': (0.0, 0.0, 1.0), 'c': (0.0, 0.75, 0.75), 'g': (0.0, 0.5, 0.0), 'k': (0.0, 0.0, 0.0), 'm': (0.75, 0, 0.75), 'r': (1.0, 0.0, 0.0), 'w': (1.0, 1.0, 1.0), 'y': (0.75, 0.75, 0)}</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Colormap">class <strong>Colormap</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Basis&nbsp;abstract&nbsp;class&nbsp;for&nbsp;all&nbsp;scalar&nbsp;to&nbsp;rgb&nbsp;mappings<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Colormap-__call__"><strong>__call__</strong></a>(self, X, alpha<font color="#909090">=1.0</font>)</dt></dl>

<dl><dt><a name="Colormap-__init__"><strong>__init__</strong></a>(self, name, N<font color="#909090">=256</font>)</dt><dd><tt>Public&nbsp;class&nbsp;attributes:<br>
self.<strong>N</strong>:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;of&nbsp;rgb&nbsp;quantization&nbsp;levels<br>
self.<strong>name</strong>:&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;of&nbsp;colormap</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="LinearSegmentedColormap">class <strong>LinearSegmentedColormap</strong></a>(<a href="matplotlib.colors.html#Colormap">Colormap</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#Colormap">Colormap</a>&nbsp;objects&nbsp;based&nbsp;on&nbsp;lookup&nbsp;tables&nbsp;using&nbsp;linear&nbsp;segments.<br>
&nbsp;<br>
The&nbsp;lookup&nbsp;transfer&nbsp;function&nbsp;is&nbsp;a&nbsp;simple&nbsp;linear&nbsp;function&nbsp;between&nbsp;<br>
defined&nbsp;intensities.&nbsp;There&nbsp;is&nbsp;no&nbsp;limit&nbsp;to&nbsp;the&nbsp;number&nbsp;of&nbsp;segments<br>
that&nbsp;may&nbsp;be&nbsp;defined.&nbsp;Though&nbsp;as&nbsp;the&nbsp;segment&nbsp;intervals&nbsp;start&nbsp;containing<br>
fewer&nbsp;and&nbsp;fewer&nbsp;array&nbsp;locations,&nbsp;there&nbsp;will&nbsp;be&nbsp;inevitable&nbsp;quantization<br>
errors<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="LinearSegmentedColormap-__call__"><strong>__call__</strong></a>(self, X, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>X&nbsp;is&nbsp;either&nbsp;a&nbsp;scalar&nbsp;or&nbsp;an&nbsp;array&nbsp;(of&nbsp;any&nbsp;dimension).<br>
If&nbsp;scalar,&nbsp;a&nbsp;tuple&nbsp;of&nbsp;rgba&nbsp;values&nbsp;is&nbsp;returned,&nbsp;otherwise<br>
an&nbsp;array&nbsp;with&nbsp;the&nbsp;new&nbsp;shape&nbsp;=&nbsp;oldshape+(4,).&nbsp;&nbsp;Any&nbsp;values<br>
that&nbsp;are&nbsp;outside&nbsp;the&nbsp;0,1&nbsp;interval&nbsp;are&nbsp;clipped&nbsp;to&nbsp;that<br>
interval&nbsp;before&nbsp;generating&nbsp;rgb&nbsp;values.&nbsp;&nbsp;<br>
Alpha&nbsp;must&nbsp;be&nbsp;a&nbsp;scalar</tt></dd></dl>

<dl><dt><a name="LinearSegmentedColormap-__init__"><strong>__init__</strong></a>(self, name, segmentdata, N<font color="#909090">=256</font>)</dt><dd><tt>Create&nbsp;color&nbsp;map&nbsp;from&nbsp;linear&nbsp;mapping&nbsp;segments<br>
&nbsp;<br>
segmentdata&nbsp;argument&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;with&nbsp;a&nbsp;red,&nbsp;green&nbsp;and&nbsp;blue<br>
entries.&nbsp;Each&nbsp;entry&nbsp;should&nbsp;be&nbsp;a&nbsp;list&nbsp;of&nbsp;x,&nbsp;y0,&nbsp;y1&nbsp;tuples.<br>
See&nbsp;makeMappingArray&nbsp;for&nbsp;details</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="normalize">class <strong>normalize</strong></a></font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="normalize-__call__"><strong>__call__</strong></a>(self, value)</dt></dl>

<dl><dt><a name="normalize-__init__"><strong>__init__</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>Normalize&nbsp;a&nbsp;given&nbsp;value&nbsp;to&nbsp;the&nbsp;0-1&nbsp;range<br>
&nbsp;<br>
If&nbsp;vmin&nbsp;or&nbsp;vmax&nbsp;is&nbsp;not&nbsp;given,&nbsp;they&nbsp;are&nbsp;taken&nbsp;from&nbsp;the&nbsp;input's<br>
minimum&nbsp;and&nbsp;maximum&nbsp;value&nbsp;respectively.&nbsp;&nbsp;If&nbsp;the&nbsp;given&nbsp;value<br>
falls&nbsp;outside&nbsp;the&nbsp;range,&nbsp;the&nbsp;returned&nbsp;value&nbsp;will&nbsp;be&nbsp;0&nbsp;or&nbsp;1,<br>
whichever&nbsp;is&nbsp;closest.&nbsp;Returns&nbsp;0&nbsp;if&nbsp;vmin==vmax.&nbsp;Works&nbsp;with<br>
scalars&nbsp;or&nbsp;arrays.</tt></dd></dl>

<dl><dt><a name="normalize-autoscale"><strong>autoscale</strong></a>(self, A)</dt></dl>

<dl><dt><a name="normalize-is_mappable"><strong>is_mappable</strong></a>(self)</dt></dl>

<dl><dt><a name="normalize-scaled"><strong>scaled</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;vmin&nbsp;and&nbsp;vmax&nbsp;set</tt></dd></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-arange"><strong>arange</strong></a>(...)</dt><dd><tt><a href="#-arange">arange</a>(start,&nbsp;stop=None,&nbsp;step=1,&nbsp;typecode=None)<br>
&nbsp;<br>
&nbsp;Just&nbsp;like&nbsp;range()&nbsp;except&nbsp;it&nbsp;returns&nbsp;an&nbsp;array&nbsp;whose&nbsp;type&nbsp;can&nbsp;be<br>
specified&nbsp;by&nbsp;the&nbsp;keyword&nbsp;argument&nbsp;typecode.</tt></dd></dl>
 <dl><dt><a name="-array"><strong>array</strong></a>(...)</dt><dd><tt><a href="#-array">array</a>(sequence,&nbsp;typecode=None,&nbsp;copy=1,&nbsp;savespace=0)&nbsp;will&nbsp;return&nbsp;a&nbsp;new&nbsp;array&nbsp;formed&nbsp;from&nbsp;the&nbsp;given&nbsp;(potentially&nbsp;nested)&nbsp;sequence&nbsp;with&nbsp;type&nbsp;given&nbsp;by&nbsp;typecode.&nbsp;&nbsp;If&nbsp;no&nbsp;typecode&nbsp;is&nbsp;given,&nbsp;then&nbsp;the&nbsp;type&nbsp;will&nbsp;be&nbsp;determined&nbsp;as&nbsp;the&nbsp;minimum&nbsp;type&nbsp;required&nbsp;to&nbsp;hold&nbsp;the&nbsp;objects&nbsp;in&nbsp;sequence.&nbsp;&nbsp;If&nbsp;copy&nbsp;is&nbsp;zero&nbsp;and&nbsp;sequence&nbsp;is&nbsp;already&nbsp;an&nbsp;array,&nbsp;a&nbsp;reference&nbsp;will&nbsp;be&nbsp;returned.&nbsp;&nbsp;If&nbsp;savespace&nbsp;is&nbsp;nonzero,&nbsp;the&nbsp;new&nbsp;array&nbsp;will&nbsp;maintain&nbsp;its&nbsp;precision&nbsp;in&nbsp;operations.</tt></dd></dl>
 <dl><dt><a name="-hex2color"><strong>hex2color</strong></a>(s)</dt><dd><tt>Convert&nbsp;hex&nbsp;string&nbsp;(like&nbsp;html&nbsp;uses,&nbsp;eg,&nbsp;#efefef)&nbsp;to&nbsp;a&nbsp;r,g,b&nbsp;tuple</tt></dd></dl>
 <dl><dt><a name="-looks_like_color"><strong>looks_like_color</strong></a>(c)</dt></dl>
 <dl><dt><a name="-makeMappingArray"><strong>makeMappingArray</strong></a>(N, data)</dt><dd><tt>Create&nbsp;an&nbsp;N-element&nbsp;1-d&nbsp;lookup&nbsp;table<br>
&nbsp;<br>
data&nbsp;represented&nbsp;by&nbsp;a&nbsp;list&nbsp;of&nbsp;x,y0,y1&nbsp;mapping&nbsp;correspondences.<br>
Each&nbsp;element&nbsp;in&nbsp;this&nbsp;list&nbsp;represents&nbsp;how&nbsp;a&nbsp;value&nbsp;between&nbsp;0&nbsp;and&nbsp;1<br>
(inclusive)&nbsp;represented&nbsp;by&nbsp;x&nbsp;is&nbsp;mapped&nbsp;to&nbsp;a&nbsp;corresponding&nbsp;value<br>
between&nbsp;0&nbsp;and&nbsp;1&nbsp;(inclusive).&nbsp;The&nbsp;two&nbsp;values&nbsp;of&nbsp;y&nbsp;are&nbsp;to&nbsp;allow&nbsp;<br>
for&nbsp;discontinuous&nbsp;mapping&nbsp;functions&nbsp;(say&nbsp;as&nbsp;might&nbsp;be&nbsp;found&nbsp;in&nbsp;a<br>
sawtooth)&nbsp;where&nbsp;y0&nbsp;represents&nbsp;the&nbsp;value&nbsp;of&nbsp;y&nbsp;for&nbsp;values&nbsp;of&nbsp;x<br>
&lt;=&nbsp;to&nbsp;that&nbsp;given,&nbsp;and&nbsp;y1&nbsp;is&nbsp;the&nbsp;value&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;x&nbsp;&gt;&nbsp;than<br>
that&nbsp;given).&nbsp;The&nbsp;list&nbsp;must&nbsp;start&nbsp;with&nbsp;x=0,&nbsp;end&nbsp;with&nbsp;x=1,&nbsp;and&nbsp;<br>
all&nbsp;values&nbsp;of&nbsp;x&nbsp;must&nbsp;be&nbsp;in&nbsp;increasing&nbsp;order.&nbsp;Values&nbsp;between<br>
the&nbsp;given&nbsp;mapping&nbsp;points&nbsp;are&nbsp;determined&nbsp;by&nbsp;simple&nbsp;linear&nbsp;interpolation.<br>
&nbsp;<br>
The&nbsp;function&nbsp;returns&nbsp;an&nbsp;array&nbsp;"result"&nbsp;where&nbsp;result[x*(N-1)]<br>
gives&nbsp;the&nbsp;closest&nbsp;value&nbsp;for&nbsp;values&nbsp;of&nbsp;x&nbsp;between&nbsp;0&nbsp;and&nbsp;1.</tt></dd></dl>
 <dl><dt><a name="-searchsorted"><strong>searchsorted</strong></a> = binarysearch(...)</dt><dd><tt>binarysearch(a,v)</tt></dd></dl>
 <dl><dt><a name="-take"><strong>take</strong></a>(...)</dt><dd><tt><a href="#-take">take</a>(a,&nbsp;indices,&nbsp;axis=0).&nbsp;&nbsp;Selects&nbsp;the&nbsp;elements&nbsp;in&nbsp;indices&nbsp;from&nbsp;array&nbsp;a&nbsp;along&nbsp;the&nbsp;given&nbsp;axis.</tt></dd></dl>
 <dl><dt><a name="-zeros"><strong>zeros</strong></a>(...)</dt><dd><tt><a href="#-zeros">zeros</a>((d1,...,dn),typecode='l',savespace=0)&nbsp;will&nbsp;return&nbsp;a&nbsp;new&nbsp;array&nbsp;of&nbsp;shape&nbsp;(d1,...,dn)&nbsp;and&nbsp;type&nbsp;typecode&nbsp;with&nbsp;all&nbsp;it's&nbsp;entries&nbsp;initialized&nbsp;to&nbsp;zero.&nbsp;&nbsp;If&nbsp;savespace&nbsp;is&nbsp;nonzero&nbsp;the&nbsp;array&nbsp;will&nbsp;be&nbsp;a&nbsp;spacesaver&nbsp;array.</tt></dd></dl>
</td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>False</strong> = False<br>
<strong>Float</strong> = 'd'<br>
<strong>Int</strong> = 'l'<br>
<strong>True</strong> = True<br>
<strong>colorConverter</strong> = &lt;matplotlib.colors.ColorConverter instance&gt;<br>
<strong>division</strong> = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)</td></tr></table>
@footer@